""" 
SYS3

Módulo que acessa as funcionalidades do sistema SYS3 e permite manipulação de arquivos .xls
para a atualização de relatórios do PowerBI.

Author: Juliano Kosloski - Automation Developer
Created: 30/09/2022 by Juliano Kosloski
"""

import dotenv
import os
import re
import time
import datetime
import openpyxl
import pyautogui
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By

class SYS3: 
    
    def startDriver():
        """
        Starts up the Chrome WebDriver config and returns a readied driver instance
        """

        option = webdriver.ChromeOptions() 
        # option.binary_location = "C:/Program Files (x86)/Google/Chrome/Application/chrome.exe"  #dev
        option.binary_location = "C:/Program Files/Google/Chrome/Application/chrome.exe"  #robot machine
        driverService = Service('C:/WebDrivers/chromedriver.exe') #sets up a driver service 
        driver = webdriver.Chrome(service=driverService, options=option) #starts the driver

        return driver
    
    def __getCred__() -> tuple: 
        """
        Gets appropriate credentials and returns them for in-class use
        """

        dotenv.load_dotenv(dotenv.find_dotenv())
        sysLogin = os.environ.get("USER_SYS3")
        sysPassword = os.environ.get("PASS_SYS3")
                
        return sysLogin, sysPassword
    
    def getLogin(driver):
        """
        Takes a new driver instance and logs into the SYS3 website

        params:
        driver: a WebDriver instance generated by other function
        """

        sysLogin, sysPassword = SYS3.__getCred__() 

        driver.get("https://urlurlurl3.com")
        #finds user field
        element = driver.find_element(By.XPATH,"/html/body/div/div[1]/section/div[1]/div/form/div[1]/div/input" )
        element.clear()
        element.click()
        element.send_keys(sysLogin)
        #finds password field
        element = driver.find_element(By.XPATH, "/html/body/div/div[1]/section/div[1]/div/form/div[2]/div/input")
        element.clear()
        element.click()
        element.send_keys(sysPassword)
        #finds login buttom
        element = driver.find_element(By.XPATH, "/html/body/div/div[1]/section/div[1]/div/form/div[3]/div/button")
        element.click()

    def getLink(driver, url :str = "", attempts = 1) -> None:
        """
        Navigates to a link on the web

        params:
        driver: a WebDriver instance generated by other function
        url: a string link to a webpage
        attempts: int of how many access tries
        """

        tries = 0  
        while tries < attempts: #try to access the website x times
            driver.get(url)
            tries += 1
            
    def _beforeDate(daysBefore:int) -> str:
        """
        Returns a date before the current date (given the parameter)
        
        params:
        daysBefore: how many days before current date
        """
        
        today = datetime.datetime.now()
        d = datetime.timedelta(days = daysBefore)
        beforeDate = today - d
        beforeDate = beforeDate.strftime("%d%m%Y")
        
        return beforeDate
            
    def inputDates(driver) -> None:
        """
        Inputs dates on the form fields

        params:
        driver: a WebDriver instance generated by other function
        """
        
        date_ini = SYS3._beforeDate(7);
        date_fim = SYS3._beforeDate(1);
        
        pyautogui.press("tab", presses = 6)
        #finds beginning date
        element = driver.find_element(By.ID,"dt_ini" )
        element.click()
        element.send_keys(date_ini)
        
        pyautogui.press("tab", presses = 1)
        #finds end date
        element = driver.find_element(By.ID,"dt_fim" )
        element.click()
        element.send_keys(date_fim)
        
    def downloadRelFluid(driver) -> None: 
        """
        Interacts with the fields to download a report

        params:
        driver: a WebDriver instance generated by other function
        """
        
        SYS3.inputDates(driver)
        time.sleep(5)
        
        #finds inspect buttom
        element = driver.find_element(By.XPATH, "//*[@id='form-abertura']/button")
        element.click()
        
        time.sleep(5)
        #finds export buttom
        element = driver.find_element(By.XPATH, "//*[@id='exportModal']/i")
        element.click()
        
        time.sleep(5)
        #finds select all buttom
        element = driver.find_element(By.XPATH, "//*[@id='rel-export-modal']/div[2]/div/div[3]/a[1]")
        element.click()
        
        time.sleep(2)
        #finds final download buttom
        element = driver.find_element(By.ID, "downloadRel")
        element.click()
        time.sleep(10)
        
    def endSession(driver):
        """
        Ends the driver session
        """

        driver.quit()
    
    def getFilePath() -> str:
        """
        Search Downloads folder for the updated report and returns its path
        if a match is found
        """
        
        filePath = ""
        #creates a regex pattern to search the dir
        pattern = r"^filename.*.xls" 
        rx = re.compile(pattern)
        
        for file in os.listdir(path = "C:/Users/???/Downloads"): 
        # for file in os.listdir(path = "C:/Users/juliano_kosloski/Downloads"): 
                
            if rx.match(file):
                file_name = file
                print("Um arquivo foi encontrado: " + file_name)
        
        # filePath = "C:/Users/juliano_kosloski/Downloads/{}".format(file_name)  #----DEV
        filePath = "C:/Users/???/Downloads/{}".format(file_name)
        
        return filePath
    
    def saveAsXLSX(path : str) -> str:
        """
        Navigates Excel GUI to save file as .xlsx, returning the new file path 
    
        params:
        path: a string with the file path
        """

        file = os.startfile(path) #opens the file for reading or writing
        time.sleep(5) #wait for the file to load
        
        #this function solves the issue of losing data types when doing direct csv to xlsx conversion
        
        pyautogui.press("left")
        time.sleep(2)
        pyautogui.press("enter")
        time.sleep(5)
        pyautogui.hotkey("alt", "a") #goes to file options in excel (PT-BR)
        time.sleep(2)
        pyautogui.press("a") #opens save as option
        time.sleep(2)
        pyautogui.hotkey("y", "4") #opens file type selection
        time.sleep(2)
        pyautogui.press("up", presses = 12) #navigates to .xlsx
        pyautogui.press("enter") #confirms the selection
        
        # locPoint = pyautogui.locateCenterOnScreen('smart/assets/test_save.png') #----Dev
        locPoint = pyautogui.locateCenterOnScreen('assets/save.png') #finds the save buttom and clicks it
        pyautogui.click(locPoint) 
        
        print("File saved as .xlsx...")
        newPath = path + ".xlsx"
        time.sleep(4)
        
        print("Closing Excel...")
        os.system("TASKKILL /F /IM EXCEL.exe")
        time.sleep(5)
        
        return newPath
            
    def copyFromTo(fromFile:str, toFile:str) -> None:
        """
        Copy data from one .xls file to another, ignoring headers
        
        params:
        fromFile: path to the input file
        toFile: path to the output file
        """
        
        print("Loading worksheets...")
        #load input workbook
        wb_from = openpyxl.load_workbook(fromFile, data_only=True) 
        ws_from = wb_from.worksheets[0]
        
        #load output workbook
        wb_to = openpyxl.load_workbook(toFile) 
        ws_to = wb_to["SHEET"]
        
        from_maxr = ws_from.max_row
        from_maxc = ws_from.max_column
        
        print("Finding the start row on the destination file...")
        
        c = 1
        i = 1
        while(True):
            check = ws_to.cell(row = i, column = c)
            if check.value == None:
                to_start_row = i -2   # the subtraction here is to stop the copy from jumping rows in the next loop
                break
            i += 1
        
        print("Copying data...")
        for i in range (2, from_maxr + 1):
            for j in range (1, from_maxc + 1):
                # reading cell value from source excel file
                data = ws_from.cell(row = i, column = j)
        
                # writing the read value to destination excel file
                ws_to.cell(row = to_start_row + i, column = j).value = data.value
              
        print("Saving files...")
        wb_to.save(toFile)  
        print("Files saved")